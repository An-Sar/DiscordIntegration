buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name 'Tethys (drakon.io)'
            url "http://tethys.drakon.io/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

plugins {
    id "com.github.johnrengelman.shadow" version "1.2.2"
}

repositories {
    ivy {
        name "CurseForge"
        artifactPattern 'http://addons-origin.cursecdn.com/files/[organisation]/[module]-[revision].[ext]'
    }
    flatDir {
        dirs "libs"
    }
}

apply plugin: 'forge'

def mcVersion = "1.7.10"
def forgeVersion = "10.13.4.1558"
def modVersion = '2.0.1'

version = 'mc' + mcVersion + '-' + modVersion
group = "chikachi.discord"
archivesBaseName = "DiscordIntegration"

sourceCompatibility = 1.8
targetCompatibility = 1.8

minecraft {
    version = mcVersion + "-" + forgeVersion + "-" + mcVersion
    if (file('../run').exists()) {
        runDir = "../run"
    } else {
        runDir = "run"
    }

    srgExtra "PK: com/mashape/unirest chikachi/discord/repack/com/mashape/unirest"
    srgExtra "PK: com/neovisionaries/ws/client chikachi/discord/repack/com/neovisionaries/ws/client"
    srgExtra "PK: com/sun/jna chikachi/discord/repack/com/sun/jna"
    srgExtra "PK: com/vdurmont/emoji chikachi/discord/repack/com/vdurmont/emoji"
    srgExtra "PK: javax/sound chikachi/discord/repack/javax/sound"
    srgExtra "PK: javazoom chikachi/discord/repack/javazoom"
    srgExtra "PK: net/dv8tion/jda chikachi/discord/repack/net/dv8tion/jda"
    srgExtra "PK: net/sourceforge/jaad chikachi/discord/repack/net/sourceforge/jaad"
    srgExtra "PK: org/json chikachi/discord/repack/org/json"
    srgExtra "PK: org/kc7bfi/jflac chikachi/discord/repack/orgkc7bfi/jflac"
    srgExtra "PK: org/apache/http chikachi/discord/repack/org/apache/http"
    srgExtra "PK: org/tritonus chikachi/discord/repack/org/tritonus"
    srgExtra "PK: tomp2p/opuswrapper chikachi/discord/repack/tomp2p/opuswrapper"
}

def printDebug(message) {
    println "[" + archivesBaseName + "] " + message
}

configurations {
    shade
    compile.extendsFrom shade
}

class CurseForgeDependencyInfo {
    public String module, version, ext;
    private String fileid;

    public CurseForgeDependencyInfo(String module, String version, String ext, String fileid) {
        this.module = module;
        this.version = version;
        this.ext = ext;
        this.fileid = fileid;
    }

    public String GetFileId() {
        return Integer.parseInt(fileid.substring(0, 4)) + "/" + Integer.parseInt(fileid.substring(4));
    }
}

// Dependencies on CurseForge
List<CurseForgeDependencyInfo> curseForgeDependencies = new ArrayList<CurseForgeDependencyInfo>();
curseForgeDependencies.add(new CurseForgeDependencyInfo("ChikachiLib", "1.7.10-0.1.0", "jar", "2269757"));

dependencies {
    shade 'net.dv8tion:JDA:2.2.0_334:withDependencies'
    shade 'com.vdurmont:emoji-java:3.1.3'

    for (CurseForgeDependencyInfo dependency : curseForgeDependencies) {
        if (file('../' + dependency.module).exists()) {
            printDebug 'Using local ' + dependency.module + ' project'
            compile project(':' + dependency.module)
            continue;
        }
        if (file('./' + dependency.module + '.jar').exists()) {
            printDebug 'Using local ' + dependency.module + ' compiled jar'
            compile files('./' + dependency.module + '.jar')
            continue;
        }
        compile group: dependency.GetFileId(), name: dependency.module, version: dependency.version, ext: dependency.ext
    }
}

jar {
    configurations.shade.each { dep ->
        from(project.zipTree(dep)){
            exclude 'META-INF', 'META-INF/**'
        }
    }
    manifest {
        attributes(
                "FMLAT": 'discordintegration_at.cfg'
        )
    }
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

idea { module { inheritOutputDirs = true } }