buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.1-SNAPSHOT'
    }
}

plugins {
    id "com.github.johnrengelman.shadow" version "1.2.2"
}

repositories {
    ivy {
        name "CurseForge"
        artifactPattern 'http://addons-origin.cursecdn.com/files/[organisation]/[module]-[revision].[ext]'
    }
    flatDir {
        dirs "libs"
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'

def mcVersion = '1.8.9'
def forgeVersion = '11.15.1.1722'

version = "0.1.0"
group = "chikachi.discord"
archivesBaseName = "ChikachiDiscord"

sourceCompatibility = 1.8
targetCompatibility = 1.8

minecraft {
    version = mcVersion + '-' + forgeVersion

    if (file('../run').exists()) {
        runDir = '../run'
    } else {
        runDir = 'run'
    }

    mappings = "stable_22"
}

def printDebug(message) {
    println '[' + archivesBaseName + '] ' + message
}

class CurseForgeDependencyInfo {
    public String module, version, ext;
    private String fileid;

    public CurseForgeDependencyInfo(String module, String version, String ext, String fileid) {
        this.module = module;
        this.version = version;
        this.ext = ext;
        this.fileid = fileid;
    }

    public String GetFileId() {
        return Integer.parseInt(fileid.substring(0, 4)) + "/" + Integer.parseInt(fileid.substring(4));
    }
}

// Dependencies on CurseForge
List<CurseForgeDependencyInfo> curseForgeDependencies = new ArrayList<CurseForgeDependencyInfo>();

dependencies {
    compile 'net.dv8tion:JDA:2.0.0_242:withDependencies'

    for (CurseForgeDependencyInfo dependency : curseForgeDependencies) {
        if (file('../' + dependency.module).exists()) {
            printDebug 'Using local ' + dependency.module + ' project'
            compile project(':' + dependency.module)
            continue;
        }
        if (file('./' + dependency.module + '.jar').exists()) {
            printDebug 'Using local ' + dependency.module + ' compiled jar'
            compile files('./' + dependency.module + '.jar')
            continue;
        }
        compile group: dependency.GetFileId(), name: dependency.module, version: dependency.version, ext: dependency.ext
    }
}

shadowJar {
    classifier = ""
    relocate "com.mashape.unirest", "chikachi.discord.repack.com.mashape.unirest"
    relocate "com.neovisionaries.ws.client", "chikachi.discord.repack.com.neovisionaries.ws.client"
    relocate "com.sun.jna", "chikachi.discord.repack.com.sun.jna"
    relocate "javax.sound", "chikachi.discord.repack.javax.sound"
    relocate "javazoom", "chikachi.discord.repack.javazoom"
    relocate "net.dv8tion.jda", "chikachi.discord.repack.net.dv8tion.jda"
    relocate "net.sourceforge.jaad", "chikachi.discord.repack.net.sourceforge.jaad"
    relocate "org.apache.commons.codec", "chikachi.discord.repack.org.apache.commons.codec"
    relocate "org.apache.commons.lang3", "chikachi.discord.repack.org.apache.commons.lang3"
    relocate "org.json", "chikachi.discord.repack.org.json"
    relocate "org.kc7bfi.jflac", "chikachi.discord.repack.orgkc7bfi.jflac"
    relocate "org.tritonus", "chikachi.discord.repack.org.tritonus"
    relocate "tomp2p.opuswrapper", "chikachi.discord.repack.tomp2p.opuswrapper"

    relocate "org.apache.http", "chikachi.discord.repack.org.apache.http"
    relocate "org.apache.commons.logging", "chikachi.discord.repack.org.apache.commons.logging"

    dependencies {
        include(dependency('net.dv8tion:JDA:2.0.0_242:withDependencies'))
    }
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

reobf { shadowJar { mappingType = "SEARGE" } }
tasks.reobfShadowJar.mustRunAfter shadowJar

idea { module { inheritOutputDirs = true } }